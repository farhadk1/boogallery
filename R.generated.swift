//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `Chat`.
    static let chat = _R.storyboard.chat()
    /// Storyboard `Dashboard`.
    static let dashboard = _R.storyboard.dashboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Popup`.
    static let popup = _R.storyboard.popup()
    /// Storyboard `Post`.
    static let post = _R.storyboard.post()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Story`.
    static let story = _R.storyboard.story()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Chat", bundle: ...)`
    static func chat(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chat)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Dashboard", bundle: ...)`
    static func dashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Popup", bundle: ...)`
    static func popup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Post", bundle: ...)`
    static func post(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.post)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Story", bundle: ...)`
    static func story(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.story)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `Color`.
    static let color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 14 files.
  struct file {
    /// Resource file `BoutrosMBCDinkum-Medium.ttf`.
    static let boutrosMBCDinkumMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BoutrosMBCDinkum-Medium", pathExtension: "ttf")
    /// Resource file `Bryndan-Write.ttf`.
    static let bryndanWriteTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Bryndan-Write", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Hacen Sudan.ttf`.
    static let hacenSudanTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hacen Sudan", pathExtension: "ttf")
    /// Resource file `Harmattan-Regular.ttf`.
    static let harmattanRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Harmattan-Regular", pathExtension: "ttf")
    /// Resource file `Norican-Regular.ttf`.
    static let noricanRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Norican-Regular", pathExtension: "ttf")
    /// Resource file `Oswald-Heavy.ttf`.
    static let oswaldHeavyTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Oswald-Heavy", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `RobotoMono-Regular.ttf`.
    static let robotoMonoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoMono-Regular", pathExtension: "ttf")
    /// Resource file `SF-UI-Display-Regular.ttf`.
    static let sfuiDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-UI-Display-Regular", pathExtension: "ttf")
    /// Resource file `beyond_wonderland.ttf`.
    static let beyond_wonderlandTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "beyond_wonderland", pathExtension: "ttf")
    /// Resource file `emojione-android.ttf`.
    static let emojioneAndroidTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "emojione-android", pathExtension: "ttf")
    /// Resource file `icon_pull_to_refresh_arrow@2x.png`.
    static let icon_pull_to_refresh_arrow2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_pull_to_refresh_arrow@2x", pathExtension: "png")
    /// Resource file `ionicons.ttf`.
    static let ioniconsTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ionicons", pathExtension: "ttf")

    /// `bundle.url(forResource: "BoutrosMBCDinkum-Medium", withExtension: "ttf")`
    static func boutrosMBCDinkumMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.boutrosMBCDinkumMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Bryndan-Write", withExtension: "ttf")`
    static func bryndanWriteTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bryndanWriteTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hacen Sudan", withExtension: "ttf")`
    static func hacenSudanTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hacenSudanTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Harmattan-Regular", withExtension: "ttf")`
    static func harmattanRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.harmattanRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Norican-Regular", withExtension: "ttf")`
    static func noricanRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.noricanRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Oswald-Heavy", withExtension: "ttf")`
    static func oswaldHeavyTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oswaldHeavyTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoMono-Regular", withExtension: "ttf")`
    static func robotoMonoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMonoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-UI-Display-Regular", withExtension: "ttf")`
    static func sfuiDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "beyond_wonderland", withExtension: "ttf")`
    static func beyond_wonderlandTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.beyond_wonderlandTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "emojione-android", withExtension: "ttf")`
    static func emojioneAndroidTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojioneAndroidTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_pull_to_refresh_arrow@2x", withExtension: "png")`
    static func icon_pull_to_refresh_arrow2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_pull_to_refresh_arrow2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ionicons", withExtension: "ttf")`
    static func ioniconsTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ioniconsTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 11 fonts.
  struct font: Rswift.Validatable {
    /// Font `BeyondWonderland`.
    static let beyondWonderland = Rswift.FontResource(fontName: "BeyondWonderland")
    /// Font `BoutrosMBCDinkum-Medium`.
    static let boutrosMBCDinkumMedium = Rswift.FontResource(fontName: "BoutrosMBCDinkum-Medium")
    /// Font `Bryndan-Write`.
    static let bryndanWrite = Rswift.FontResource(fontName: "Bryndan-Write")
    /// Font `HacenSudan`.
    static let hacenSudan = Rswift.FontResource(fontName: "HacenSudan")
    /// Font `Harmattan-Regular`.
    static let harmattanRegular = Rswift.FontResource(fontName: "Harmattan-Regular")
    /// Font `Ionicons`.
    static let ionicons = Rswift.FontResource(fontName: "Ionicons")
    /// Font `Norican-Regular`.
    static let noricanRegular = Rswift.FontResource(fontName: "Norican-Regular")
    /// Font `Oswald-Heavy`.
    static let oswaldHeavy = Rswift.FontResource(fontName: "Oswald-Heavy")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `RobotoMono-Regular2`.
    static let robotoMonoRegular2 = Rswift.FontResource(fontName: "RobotoMono-Regular2")
    /// Font `SFUIDisplay-Regular`.
    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")

    /// `UIFont(name: "BeyondWonderland", size: ...)`
    static func beyondWonderland(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: beyondWonderland, size: size)
    }

    /// `UIFont(name: "BoutrosMBCDinkum-Medium", size: ...)`
    static func boutrosMBCDinkumMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: boutrosMBCDinkumMedium, size: size)
    }

    /// `UIFont(name: "Bryndan-Write", size: ...)`
    static func bryndanWrite(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: bryndanWrite, size: size)
    }

    /// `UIFont(name: "HacenSudan", size: ...)`
    static func hacenSudan(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hacenSudan, size: size)
    }

    /// `UIFont(name: "Harmattan-Regular", size: ...)`
    static func harmattanRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: harmattanRegular, size: size)
    }

    /// `UIFont(name: "Ionicons", size: ...)`
    static func ionicons(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ionicons, size: size)
    }

    /// `UIFont(name: "Norican-Regular", size: ...)`
    static func noricanRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: noricanRegular, size: size)
    }

    /// `UIFont(name: "Oswald-Heavy", size: ...)`
    static func oswaldHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: oswaldHeavy, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "RobotoMono-Regular2", size: ...)`
    static func robotoMonoRegular2(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMonoRegular2, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.beyondWonderland(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BeyondWonderland' could not be loaded, is 'beyond_wonderland.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.boutrosMBCDinkumMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BoutrosMBCDinkum-Medium' could not be loaded, is 'BoutrosMBCDinkum-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.bryndanWrite(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Bryndan-Write' could not be loaded, is 'Bryndan-Write.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hacenSudan(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HacenSudan' could not be loaded, is 'Hacen Sudan.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.harmattanRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Harmattan-Regular' could not be loaded, is 'Harmattan-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ionicons(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ionicons' could not be loaded, is 'ionicons.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.noricanRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Norican-Regular' could not be loaded, is 'Norican-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.oswaldHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Oswald-Heavy' could not be loaded, is 'Oswald-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMonoRegular2(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoMono-Regular2' could not be loaded, is 'RobotoMono-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SF-UI-Display-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 70 images.
  struct image {
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `fastforward`.
    static let fastforward = Rswift.ImageResource(bundle: R.hostingBundle, name: "fastforward")
    /// Image `fullscreen_disable`.
    static let fullscreen_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullscreen_disable")
    /// Image `fullscreen`.
    static let fullscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullscreen")
    /// Image `ic_action_more`.
    static let ic_action_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_more")
    /// Image `ic_add_comment`.
    static let ic_add_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_comment")
    /// Image `ic_add_post`.
    static let ic_add_post = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_post")
    /// Image `ic_add_user`.
    static let ic_add_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_user")
    /// Image `ic_back_black`.
    static let ic_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_black")
    /// Image `ic_blockuser`.
    static let ic_blockuser = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blockuser")
    /// Image `ic_capture_camera`.
    static let ic_capture_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_capture_camera")
    /// Image `ic_chat_bg`.
    static let ic_chat_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_bg")
    /// Image `ic_chat`.
    static let ic_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_contact_blue`.
    static let ic_contact_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact_blue")
    /// Image `ic_favorite_active`.
    static let ic_favorite_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_active")
    /// Image `ic_favorite_inactive`.
    static let ic_favorite_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_inactive")
    /// Image `ic_fbLogin`.
    static let ic_fbLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fbLogin")
    /// Image `ic_fb_login`.
    static let ic_fb_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb_login")
    /// Image `ic_images_small`.
    static let ic_images_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_images_small")
    /// Image `ic_likeBig`.
    static let ic_likeBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_likeBig")
    /// Image `ic_like_active`.
    static let ic_like_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_like_active")
    /// Image `ic_like_inactive`.
    static let ic_like_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_like_inactive")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_noChat`.
    static let ic_noChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_noChat")
    /// Image `ic_noUserData`.
    static let ic_noUserData = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_noUserData")
    /// Image `ic_notificationBell`.
    static let ic_notificationBell = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notificationBell")
    /// Image `ic_paint`.
    static let ic_paint = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_paint")
    /// Image `ic_play`.
    static let ic_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play")
    /// Image `ic_plus_white`.
    static let ic_plus_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_white")
    /// Image `ic_profile_small`.
    static let ic_profile_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_small")
    /// Image `ic_radioOff`.
    static let ic_radioOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radioOff")
    /// Image `ic_radioOn`.
    static let ic_radioOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radioOn")
    /// Image `ic_remove_item`.
    static let ic_remove_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_item")
    /// Image `ic_sendBarButton`.
    static let ic_sendBarButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sendBarButton")
    /// Image `ic_send`.
    static let ic_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_share`.
    static let ic_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share")
    /// Image `ic_smiley`.
    static let ic_smiley = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley")
    /// Image `ic_stop`.
    static let ic_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_stop")
    /// Image `ic_tab_add`.
    static let ic_tab_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_add")
    /// Image `ic_tab_explore`.
    static let ic_tab_explore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_explore")
    /// Image `ic_tab_home`.
    static let ic_tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_home")
    /// Image `ic_tab_notification`.
    static let ic_tab_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_notification")
    /// Image `ic_tab_profile`.
    static let ic_tab_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_profile")
    /// Image `ic_tooltip_gif`.
    static let ic_tooltip_gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_gif")
    /// Image `ic_tooltip_image`.
    static let ic_tooltip_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_image")
    /// Image `ic_tooltip_link`.
    static let ic_tooltip_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_link")
    /// Image `ic_tooltip_video`.
    static let ic_tooltip_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_video")
    /// Image `ic_type_gif`.
    static let ic_type_gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_gif")
    /// Image `ic_type_image`.
    static let ic_type_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_image")
    /// Image `ic_type_link`.
    static let ic_type_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_link")
    /// Image `ic_type_video`.
    static let ic_type_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_video")
    /// Image `icon_pull_to_refresh_arrow`.
    static let icon_pull_to_refresh_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pull_to_refresh_arrow")
    /// Image `img_black_placeholder`.
    static let img_black_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_black_placeholder")
    /// Image `img_circular_placeholder`.
    static let img_circular_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circular_placeholder")
    /// Image `img_intro`.
    static let img_intro = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_intro")
    /// Image `img_item_placeholder`.
    static let img_item_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_placeholder")
    /// Image `img_profile_placeholder`.
    static let img_profile_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_profile_placeholder")
    /// Image `img_search_big`.
    static let img_search_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_search_big")
    /// Image `img_splash`.
    static let img_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_splash")
    /// Image `ionicons_2-0-1_android-more-vertical_24_0_000000_none`.
    static let ionicons_201_androidMoreVertical_24_0_000000_none = Rswift.ImageResource(bundle: R.hostingBundle, name: "ionicons_2-0-1_android-more-vertical_24_0_000000_none")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `pip`.
    static let pip = Rswift.ImageResource(bundle: R.hostingBundle, name: "pip")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `playhead`.
    static let playhead = Rswift.ImageResource(bundle: R.hostingBundle, name: "playhead")
    /// Image `rewind`.
    static let rewind = Rswift.ImageResource(bundle: R.hostingBundle, name: "rewind")
    /// Image `skipBackward`.
    static let skipBackward = Rswift.ImageResource(bundle: R.hostingBundle, name: "skipBackward")
    /// Image `skipForward`.
    static let skipForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "skipForward")
    /// Image `watermark`.
    static let watermark = Rswift.ImageResource(bundle: R.hostingBundle, name: "watermark")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fastforward", bundle: ..., traitCollection: ...)`
    static func fastforward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fastforward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fullscreen", bundle: ..., traitCollection: ...)`
    static func fullscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullscreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fullscreen_disable", bundle: ..., traitCollection: ...)`
    static func fullscreen_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullscreen_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_action_more", bundle: ..., traitCollection: ...)`
    static func ic_action_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_comment", bundle: ..., traitCollection: ...)`
    static func ic_add_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_post", bundle: ..., traitCollection: ...)`
    static func ic_add_post(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_post, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_user", bundle: ..., traitCollection: ...)`
    static func ic_add_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_black", bundle: ..., traitCollection: ...)`
    static func ic_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_blockuser", bundle: ..., traitCollection: ...)`
    static func ic_blockuser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blockuser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_capture_camera", bundle: ..., traitCollection: ...)`
    static func ic_capture_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_capture_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chat", bundle: ..., traitCollection: ...)`
    static func ic_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chat_bg", bundle: ..., traitCollection: ...)`
    static func ic_chat_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_contact_blue", bundle: ..., traitCollection: ...)`
    static func ic_contact_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favorite_active", bundle: ..., traitCollection: ...)`
    static func ic_favorite_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favorite_inactive", bundle: ..., traitCollection: ...)`
    static func ic_favorite_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fbLogin", bundle: ..., traitCollection: ...)`
    static func ic_fbLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fbLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fb_login", bundle: ..., traitCollection: ...)`
    static func ic_fb_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb_login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_images_small", bundle: ..., traitCollection: ...)`
    static func ic_images_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_images_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_likeBig", bundle: ..., traitCollection: ...)`
    static func ic_likeBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_likeBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_like_active", bundle: ..., traitCollection: ...)`
    static func ic_like_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_like_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_like_inactive", bundle: ..., traitCollection: ...)`
    static func ic_like_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_like_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_noChat", bundle: ..., traitCollection: ...)`
    static func ic_noChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_noChat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_noUserData", bundle: ..., traitCollection: ...)`
    static func ic_noUserData(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_noUserData, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notificationBell", bundle: ..., traitCollection: ...)`
    static func ic_notificationBell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notificationBell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_paint", bundle: ..., traitCollection: ...)`
    static func ic_paint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_paint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_play", bundle: ..., traitCollection: ...)`
    static func ic_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_white", bundle: ..., traitCollection: ...)`
    static func ic_plus_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_profile_small", bundle: ..., traitCollection: ...)`
    static func ic_profile_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radioOff", bundle: ..., traitCollection: ...)`
    static func ic_radioOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radioOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radioOn", bundle: ..., traitCollection: ...)`
    static func ic_radioOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radioOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_remove_item", bundle: ..., traitCollection: ...)`
    static func ic_remove_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_send", bundle: ..., traitCollection: ...)`
    static func ic_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sendBarButton", bundle: ..., traitCollection: ...)`
    static func ic_sendBarButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sendBarButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share", bundle: ..., traitCollection: ...)`
    static func ic_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley", bundle: ..., traitCollection: ...)`
    static func ic_smiley(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_stop", bundle: ..., traitCollection: ...)`
    static func ic_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_add", bundle: ..., traitCollection: ...)`
    static func ic_tab_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_explore", bundle: ..., traitCollection: ...)`
    static func ic_tab_explore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_explore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_home", bundle: ..., traitCollection: ...)`
    static func ic_tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_notification", bundle: ..., traitCollection: ...)`
    static func ic_tab_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_profile", bundle: ..., traitCollection: ...)`
    static func ic_tab_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_gif", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_image", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_link", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_link, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_video", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_gif", bundle: ..., traitCollection: ...)`
    static func ic_type_gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_image", bundle: ..., traitCollection: ...)`
    static func ic_type_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_link", bundle: ..., traitCollection: ...)`
    static func ic_type_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_link, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_video", bundle: ..., traitCollection: ...)`
    static func ic_type_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pull_to_refresh_arrow", bundle: ..., traitCollection: ...)`
    static func icon_pull_to_refresh_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pull_to_refresh_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_black_placeholder", bundle: ..., traitCollection: ...)`
    static func img_black_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_black_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circular_placeholder", bundle: ..., traitCollection: ...)`
    static func img_circular_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circular_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_intro", bundle: ..., traitCollection: ...)`
    static func img_intro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_intro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_item_placeholder", bundle: ..., traitCollection: ...)`
    static func img_item_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_profile_placeholder", bundle: ..., traitCollection: ...)`
    static func img_profile_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_profile_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_search_big", bundle: ..., traitCollection: ...)`
    static func img_search_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_search_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_splash", bundle: ..., traitCollection: ...)`
    static func img_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ionicons_2-0-1_android-more-vertical_24_0_000000_none", bundle: ..., traitCollection: ...)`
    static func ionicons_201_androidMoreVertical_24_0_000000_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ionicons_201_androidMoreVertical_24_0_000000_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pip", bundle: ..., traitCollection: ...)`
    static func pip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "playhead", bundle: ..., traitCollection: ...)`
    static func playhead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playhead, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rewind", bundle: ..., traitCollection: ...)`
    static func rewind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rewind, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skipBackward", bundle: ..., traitCollection: ...)`
    static func skipBackward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipBackward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skipForward", bundle: ..., traitCollection: ...)`
    static func skipForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipForward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watermark", bundle: ..., traitCollection: ...)`
    static func watermark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watermark, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 40 nibs.
  struct nib {
    /// Nib `ContactsTableCell`.
    static let contactsTableCell = _R.nib._ContactsTableCell()
    /// Nib `CoverView`.
    static let coverView = _R.nib._CoverView()
    /// Nib `IntroItem`.
    static let introItem = _R.nib._IntroItem()
    /// Nib `PPAddPostCaptionTableViewCell`.
    static let ppAddPostCaptionTableViewCell = _R.nib._PPAddPostCaptionTableViewCell()
    /// Nib `PPBlockedUserItemTableViewCell`.
    static let ppBlockedUserItemTableViewCell = _R.nib._PPBlockedUserItemTableViewCell()
    /// Nib `PPChatUserItemTableViewCell`.
    static let ppChatUserItemTableViewCell = _R.nib._PPChatUserItemTableViewCell()
    /// Nib `PPCollectionViewItemTableViewCell`.
    static let ppCollectionViewItemTableViewCell = _R.nib._PPCollectionViewItemTableViewCell()
    /// Nib `PPColorItemCollectionViewCell`.
    static let ppColorItemCollectionViewCell = _R.nib._PPColorItemCollectionViewCell()
    /// Nib `PPCommentItemTableViewCell`.
    static let ppCommentItemTableViewCell = _R.nib._PPCommentItemTableViewCell()
    /// Nib `PPFontItemCollectionViewCell`.
    static let ppFontItemCollectionViewCell = _R.nib._PPFontItemCollectionViewCell()
    /// Nib `PPGIFItemTableViewCell`.
    static let ppgifItemTableViewCell = _R.nib._PPGIFItemTableViewCell()
    /// Nib `PPHashTagItemTableViewCell`.
    static let ppHashTagItemTableViewCell = _R.nib._PPHashTagItemTableViewCell()
    /// Nib `PPHorizontalCollectionviewItemTableViewCell`.
    static let ppHorizontalCollectionviewItemTableViewCell = _R.nib._PPHorizontalCollectionviewItemTableViewCell()
    /// Nib `PPImageItemTableViewCell`.
    static let ppImageItemTableViewCell = _R.nib._PPImageItemTableViewCell()
    /// Nib `PPInputTextFieldItemTableViewCell`.
    static let ppInputTextFieldItemTableViewCell = _R.nib._PPInputTextFieldItemTableViewCell()
    /// Nib `PPMosaicGIFItemCollectionViewCell`.
    static let ppMosaicGIFItemCollectionViewCell = _R.nib._PPMosaicGIFItemCollectionViewCell()
    /// Nib `PPMosaicImageItemCollectionViewCell`.
    static let ppMosaicImageItemCollectionViewCell = _R.nib._PPMosaicImageItemCollectionViewCell()
    /// Nib `PPMosaicVideoItemCollectionViewCell`.
    static let ppMosaicVideoItemCollectionViewCell = _R.nib._PPMosaicVideoItemCollectionViewCell()
    /// Nib `PPMultiImageItemTableViewCell`.
    static let ppMultiImageItemTableViewCell = _R.nib._PPMultiImageItemTableViewCell()
    /// Nib `PPMyProfileCaptureProfileTableViewCell`.
    static let ppMyProfileCaptureProfileTableViewCell = _R.nib._PPMyProfileCaptureProfileTableViewCell()
    /// Nib `PPMyProfileITemTableViewCell`.
    static let ppMyProfileITemTableViewCell = _R.nib._PPMyProfileITemTableViewCell()
    /// Nib `PPNoResultTableViewCell`.
    static let ppNoResultTableViewCell = _R.nib._PPNoResultTableViewCell()
    /// Nib `PPNormalVerticalCollectionViewItemTableViewCell`.
    static let ppNormalVerticalCollectionViewItemTableViewCell = _R.nib._PPNormalVerticalCollectionViewItemTableViewCell()
    /// Nib `PPNotificationItemTableViewCell`.
    static let ppNotificationItemTableViewCell = _R.nib._PPNotificationItemTableViewCell()
    /// Nib `PPPostItemCollectionViewCell`.
    static let ppPostItemCollectionViewCell = _R.nib._PPPostItemCollectionViewCell()
    /// Nib `PPProfileCheckBoxItemTableViewCell`.
    static let ppProfileCheckBoxItemTableViewCell = _R.nib._PPProfileCheckBoxItemTableViewCell()
    /// Nib `PPProfileItemTableViewCell`.
    static let ppProfileItemTableViewCell = _R.nib._PPProfileItemTableViewCell()
    /// Nib `PPReceiverChatItemTableViewCell`.
    static let ppReceiverChatItemTableViewCell = _R.nib._PPReceiverChatItemTableViewCell()
    /// Nib `PPSelectPostItemTableViewCell`.
    static let ppSelectPostItemTableViewCell = _R.nib._PPSelectPostItemTableViewCell()
    /// Nib `PPSenderChatItemTableViewCell`.
    static let ppSenderChatItemTableViewCell = _R.nib._PPSenderChatItemTableViewCell()
    /// Nib `PPSettingsItemTableViewCell`.
    static let ppSettingsItemTableViewCell = _R.nib._PPSettingsItemTableViewCell()
    /// Nib `PPStoryItemCollectionViewCell`.
    static let ppStoryItemCollectionViewCell = _R.nib._PPStoryItemCollectionViewCell()
    /// Nib `PPSubmitButtonItemTableViewCell`.
    static let ppSubmitButtonItemTableViewCell = _R.nib._PPSubmitButtonItemTableViewCell()
    /// Nib `PPUserProfileThumbnailItemCollectionViewCell`.
    static let ppUserProfileThumbnailItemCollectionViewCell = _R.nib._PPUserProfileThumbnailItemCollectionViewCell()
    /// Nib `PPUserSuggestionCollectionViewCell`.
    static let ppUserSuggestionCollectionViewCell = _R.nib._PPUserSuggestionCollectionViewCell()
    /// Nib `PPVideoItemTableViewCell`.
    static let ppVideoItemTableViewCell = _R.nib._PPVideoItemTableViewCell()
    /// Nib `PPYourStoryItemCollectionViewCell`.
    static let ppYourStoryItemCollectionViewCell = _R.nib._PPYourStoryItemCollectionViewCell()
    /// Nib `PPYoutubeItemTableViewCell`.
    static let ppYoutubeItemTableViewCell = _R.nib._PPYoutubeItemTableViewCell()
    /// Nib `UserSuggestionCollectionCell`.
    static let userSuggestionCollectionCell = _R.nib._UserSuggestionCollectionCell()
    /// Nib `VerticalCollectionviewItemTableViewCell`.
    static let verticalCollectionviewItemTableViewCell = _R.nib._VerticalCollectionviewItemTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ContactsTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactsTableCell) instead")
    static func contactsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactsTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CoverView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coverView) instead")
    static func coverView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coverView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IntroItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.introItem) instead")
    static func introItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.introItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPAddPostCaptionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppAddPostCaptionTableViewCell) instead")
    static func ppAddPostCaptionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppAddPostCaptionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPBlockedUserItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppBlockedUserItemTableViewCell) instead")
    static func ppBlockedUserItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppBlockedUserItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPChatUserItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppChatUserItemTableViewCell) instead")
    static func ppChatUserItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppChatUserItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPCollectionViewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppCollectionViewItemTableViewCell) instead")
    static func ppCollectionViewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppCollectionViewItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPColorItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppColorItemCollectionViewCell) instead")
    static func ppColorItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppColorItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPCommentItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppCommentItemTableViewCell) instead")
    static func ppCommentItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppCommentItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPFontItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppFontItemCollectionViewCell) instead")
    static func ppFontItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppFontItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPGIFItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppgifItemTableViewCell) instead")
    static func ppgifItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppgifItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPHashTagItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppHashTagItemTableViewCell) instead")
    static func ppHashTagItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppHashTagItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPHorizontalCollectionviewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppHorizontalCollectionviewItemTableViewCell) instead")
    static func ppHorizontalCollectionviewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppHorizontalCollectionviewItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPImageItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppImageItemTableViewCell) instead")
    static func ppImageItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppImageItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPInputTextFieldItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppInputTextFieldItemTableViewCell) instead")
    static func ppInputTextFieldItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppInputTextFieldItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMosaicGIFItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMosaicGIFItemCollectionViewCell) instead")
    static func ppMosaicGIFItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMosaicGIFItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMosaicImageItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMosaicImageItemCollectionViewCell) instead")
    static func ppMosaicImageItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMosaicImageItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMosaicVideoItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMosaicVideoItemCollectionViewCell) instead")
    static func ppMosaicVideoItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMosaicVideoItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMultiImageItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMultiImageItemTableViewCell) instead")
    static func ppMultiImageItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMultiImageItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMyProfileCaptureProfileTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMyProfileCaptureProfileTableViewCell) instead")
    static func ppMyProfileCaptureProfileTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMyProfileCaptureProfileTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMyProfileITemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMyProfileITemTableViewCell) instead")
    static func ppMyProfileITemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMyProfileITemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPNoResultTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppNoResultTableViewCell) instead")
    static func ppNoResultTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppNoResultTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPNormalVerticalCollectionViewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppNormalVerticalCollectionViewItemTableViewCell) instead")
    static func ppNormalVerticalCollectionViewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppNormalVerticalCollectionViewItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPNotificationItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppNotificationItemTableViewCell) instead")
    static func ppNotificationItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppNotificationItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPPostItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppPostItemCollectionViewCell) instead")
    static func ppPostItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppPostItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPProfileCheckBoxItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppProfileCheckBoxItemTableViewCell) instead")
    static func ppProfileCheckBoxItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppProfileCheckBoxItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPProfileItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppProfileItemTableViewCell) instead")
    static func ppProfileItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppProfileItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPReceiverChatItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppReceiverChatItemTableViewCell) instead")
    static func ppReceiverChatItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppReceiverChatItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSelectPostItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSelectPostItemTableViewCell) instead")
    static func ppSelectPostItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSelectPostItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSenderChatItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSenderChatItemTableViewCell) instead")
    static func ppSenderChatItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSenderChatItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSettingsItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSettingsItemTableViewCell) instead")
    static func ppSettingsItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSettingsItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPStoryItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppStoryItemCollectionViewCell) instead")
    static func ppStoryItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppStoryItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSubmitButtonItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSubmitButtonItemTableViewCell) instead")
    static func ppSubmitButtonItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSubmitButtonItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPUserProfileThumbnailItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppUserProfileThumbnailItemCollectionViewCell) instead")
    static func ppUserProfileThumbnailItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppUserProfileThumbnailItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPUserSuggestionCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppUserSuggestionCollectionViewCell) instead")
    static func ppUserSuggestionCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppUserSuggestionCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPVideoItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppVideoItemTableViewCell) instead")
    static func ppVideoItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppVideoItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPYourStoryItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppYourStoryItemCollectionViewCell) instead")
    static func ppYourStoryItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppYourStoryItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPYoutubeItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppYoutubeItemTableViewCell) instead")
    static func ppYoutubeItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppYoutubeItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserSuggestionCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userSuggestionCollectionCell) instead")
    static func userSuggestionCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userSuggestionCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VerticalCollectionviewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.verticalCollectionviewItemTableViewCell) instead")
    static func verticalCollectionviewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verticalCollectionviewItemTableViewCell)
    }
    #endif

    static func contactsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactsTableCell? {
      return R.nib.contactsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactsTableCell
    }

    static func coverView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverView? {
      return R.nib.coverView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverView
    }

    static func introItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroItem? {
      return R.nib.introItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroItem
    }

    static func ppAddPostCaptionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPAddPostCaptionTableViewCell? {
      return R.nib.ppAddPostCaptionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPAddPostCaptionTableViewCell
    }

    static func ppBlockedUserItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPBlockedUserItemTableViewCell? {
      return R.nib.ppBlockedUserItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPBlockedUserItemTableViewCell
    }

    static func ppChatUserItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPChatUserItemTableViewCell? {
      return R.nib.ppChatUserItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPChatUserItemTableViewCell
    }

    static func ppCollectionViewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCollectionViewItemTableViewCell? {
      return R.nib.ppCollectionViewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCollectionViewItemTableViewCell
    }

    static func ppColorItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPColorItemCollectionViewCell? {
      return R.nib.ppColorItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPColorItemCollectionViewCell
    }

    static func ppCommentItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCommentItemTableViewCell? {
      return R.nib.ppCommentItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCommentItemTableViewCell
    }

    static func ppFontItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPFontItemCollectionViewCell? {
      return R.nib.ppFontItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPFontItemCollectionViewCell
    }

    static func ppHashTagItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHashTagItemTableViewCell? {
      return R.nib.ppHashTagItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHashTagItemTableViewCell
    }

    static func ppHorizontalCollectionviewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHorizontalCollectionviewItemTableViewCell? {
      return R.nib.ppHorizontalCollectionviewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHorizontalCollectionviewItemTableViewCell
    }

    static func ppImageItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPImageItemTableViewCell? {
      return R.nib.ppImageItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPImageItemTableViewCell
    }

    static func ppInputTextFieldItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPInputTextFieldItemTableViewCell? {
      return R.nib.ppInputTextFieldItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPInputTextFieldItemTableViewCell
    }

    static func ppMosaicGIFItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicGIFItemCollectionViewCell? {
      return R.nib.ppMosaicGIFItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicGIFItemCollectionViewCell
    }

    static func ppMosaicImageItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicImageItemCollectionViewCell? {
      return R.nib.ppMosaicImageItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicImageItemCollectionViewCell
    }

    static func ppMosaicVideoItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicVideoItemCollectionViewCell? {
      return R.nib.ppMosaicVideoItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicVideoItemCollectionViewCell
    }

    static func ppMultiImageItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMultiImageItemTableViewCell? {
      return R.nib.ppMultiImageItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMultiImageItemTableViewCell
    }

    static func ppMyProfileCaptureProfileTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileCaptureProfileTableViewCell? {
      return R.nib.ppMyProfileCaptureProfileTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileCaptureProfileTableViewCell
    }

    static func ppMyProfileITemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileITemTableViewCell? {
      return R.nib.ppMyProfileITemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileITemTableViewCell
    }

    static func ppNoResultTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNoResultTableViewCell? {
      return R.nib.ppNoResultTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNoResultTableViewCell
    }

    static func ppNormalVerticalCollectionViewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNormalVerticalCollectionViewItemTableViewCell? {
      return R.nib.ppNormalVerticalCollectionViewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNormalVerticalCollectionViewItemTableViewCell
    }

    static func ppNotificationItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNotificationItemTableViewCell? {
      return R.nib.ppNotificationItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNotificationItemTableViewCell
    }

    static func ppPostItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPPostItemCollectionViewCell? {
      return R.nib.ppPostItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPPostItemCollectionViewCell
    }

    static func ppProfileCheckBoxItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileCheckBoxItemTableViewCell? {
      return R.nib.ppProfileCheckBoxItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileCheckBoxItemTableViewCell
    }

    static func ppProfileItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileItemTableViewCell? {
      return R.nib.ppProfileItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileItemTableViewCell
    }

    static func ppReceiverChatItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPReceiverChatItemTableViewCell? {
      return R.nib.ppReceiverChatItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPReceiverChatItemTableViewCell
    }

    static func ppSelectPostItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSelectPostItemTableViewCell? {
      return R.nib.ppSelectPostItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSelectPostItemTableViewCell
    }

    static func ppSenderChatItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSenderChatItemTableViewCell? {
      return R.nib.ppSenderChatItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSenderChatItemTableViewCell
    }

    static func ppSettingsItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSettingsItemTableViewCell? {
      return R.nib.ppSettingsItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSettingsItemTableViewCell
    }

    static func ppStoryItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPStoryItemCollectionViewCell? {
      return R.nib.ppStoryItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPStoryItemCollectionViewCell
    }

    static func ppSubmitButtonItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSubmitButtonItemTableViewCell? {
      return R.nib.ppSubmitButtonItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSubmitButtonItemTableViewCell
    }

    static func ppUserProfileThumbnailItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserProfileThumbnailItemCollectionViewCell? {
      return R.nib.ppUserProfileThumbnailItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserProfileThumbnailItemCollectionViewCell
    }

    static func ppUserSuggestionCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserSuggestionCollectionViewCell? {
      return R.nib.ppUserSuggestionCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserSuggestionCollectionViewCell
    }

    static func ppVideoItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPVideoItemTableViewCell? {
      return R.nib.ppVideoItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPVideoItemTableViewCell
    }

    static func ppYourStoryItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYourStoryItemCollectionViewCell? {
      return R.nib.ppYourStoryItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYourStoryItemCollectionViewCell
    }

    static func ppYoutubeItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYoutubeItemTableViewCell? {
      return R.nib.ppYoutubeItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYoutubeItemTableViewCell
    }

    static func ppgifItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPGIFItemTableViewCell? {
      return R.nib.ppgifItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPGIFItemTableViewCell
    }

    static func userSuggestionCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserSuggestionCollectionCell? {
      return R.nib.userSuggestionCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserSuggestionCollectionCell
    }

    static func verticalCollectionviewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VerticalCollectionviewItemTableViewCell? {
      return R.nib.verticalCollectionviewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerticalCollectionviewItemTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 36 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContactsTableCell`.
    static let contactsTableCell: Rswift.ReuseIdentifier<ContactsTableCell> = Rswift.ReuseIdentifier(identifier: "ContactsTableCell")
    /// Reuse identifier `IntroItem`.
    static let introItem: Rswift.ReuseIdentifier<IntroItem> = Rswift.ReuseIdentifier(identifier: "IntroItem")
    /// Reuse identifier `PPBlockedUserItemTableViewCellID`.
    static let ppBlockedUserItemTableViewCellID: Rswift.ReuseIdentifier<PPBlockedUserItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPBlockedUserItemTableViewCellID")
    /// Reuse identifier `PPChatUserItemTableViewCellID`.
    static let ppChatUserItemTableViewCellID: Rswift.ReuseIdentifier<PPChatUserItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPChatUserItemTableViewCellID")
    /// Reuse identifier `PPCollectionViewItemTableViewCellID`.
    static let ppCollectionViewItemTableViewCellID: Rswift.ReuseIdentifier<PPCollectionViewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPCollectionViewItemTableViewCellID")
    /// Reuse identifier `PPColorItemCollectionViewCellID`.
    static let ppColorItemCollectionViewCellID: Rswift.ReuseIdentifier<PPColorItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPColorItemCollectionViewCellID")
    /// Reuse identifier `PPCommentItemTableViewCellID`.
    static let ppCommentItemTableViewCellID: Rswift.ReuseIdentifier<PPCommentItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPCommentItemTableViewCellID")
    /// Reuse identifier `PPFontItemCollectionViewCellID`.
    static let ppFontItemCollectionViewCellID: Rswift.ReuseIdentifier<PPFontItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPFontItemCollectionViewCellID")
    /// Reuse identifier `PPGIFItemTableViewCellID`.
    static let ppgifItemTableViewCellID: Rswift.ReuseIdentifier<PPGIFItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPGIFItemTableViewCellID")
    /// Reuse identifier `PPHashTagItemTableViewCellID`.
    static let ppHashTagItemTableViewCellID: Rswift.ReuseIdentifier<PPHashTagItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPHashTagItemTableViewCellID")
    /// Reuse identifier `PPHorizontalCollectionviewItemTableViewCellID`.
    static let ppHorizontalCollectionviewItemTableViewCellID: Rswift.ReuseIdentifier<PPHorizontalCollectionviewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPHorizontalCollectionviewItemTableViewCellID")
    /// Reuse identifier `PPImageItemTableViewCellID`.
    static let ppImageItemTableViewCellID: Rswift.ReuseIdentifier<PPImageItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPImageItemTableViewCellID")
    /// Reuse identifier `PPMosaicGIFItemCollectionViewCellID`.
    static let ppMosaicGIFItemCollectionViewCellID: Rswift.ReuseIdentifier<PPMosaicGIFItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPMosaicGIFItemCollectionViewCellID")
    /// Reuse identifier `PPMosaicImageItemCollectionViewCellID`.
    static let ppMosaicImageItemCollectionViewCellID: Rswift.ReuseIdentifier<PPMosaicImageItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPMosaicImageItemCollectionViewCellID")
    /// Reuse identifier `PPMosaicVideoItemCollectionViewCellID`.
    static let ppMosaicVideoItemCollectionViewCellID: Rswift.ReuseIdentifier<PPMosaicVideoItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPMosaicVideoItemCollectionViewCellID")
    /// Reuse identifier `PPMultiImageItemTableViewCellID`.
    static let ppMultiImageItemTableViewCellID: Rswift.ReuseIdentifier<PPMultiImageItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPMultiImageItemTableViewCellID")
    /// Reuse identifier `PPMyProfileITemTableViewCellID`.
    static let ppMyProfileITemTableViewCellID: Rswift.ReuseIdentifier<PPMyProfileITemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPMyProfileITemTableViewCellID")
    /// Reuse identifier `PPNoResultTableViewCellID`.
    static let ppNoResultTableViewCellID: Rswift.ReuseIdentifier<PPNoResultTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPNoResultTableViewCellID")
    /// Reuse identifier `PPNormalVerticalCollectionViewItemTableViewCellID`.
    static let ppNormalVerticalCollectionViewItemTableViewCellID: Rswift.ReuseIdentifier<PPNormalVerticalCollectionViewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPNormalVerticalCollectionViewItemTableViewCellID")
    /// Reuse identifier `PPNotificationItemTableViewCellID`.
    static let ppNotificationItemTableViewCellID: Rswift.ReuseIdentifier<PPNotificationItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPNotificationItemTableViewCellID")
    /// Reuse identifier `PPPostItemCollectionViewCellID`.
    static let ppPostItemCollectionViewCellID: Rswift.ReuseIdentifier<PPPostItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPPostItemCollectionViewCellID")
    /// Reuse identifier `PPProfileCheckBoxItemTableViewCellID`.
    static let ppProfileCheckBoxItemTableViewCellID: Rswift.ReuseIdentifier<PPProfileCheckBoxItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPProfileCheckBoxItemTableViewCellID")
    /// Reuse identifier `PPProfileItemTableViewCellID`.
    static let ppProfileItemTableViewCellID: Rswift.ReuseIdentifier<PPProfileItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPProfileItemTableViewCellID")
    /// Reuse identifier `PPReceiverChatItemTableViewCellID`.
    static let ppReceiverChatItemTableViewCellID: Rswift.ReuseIdentifier<PPReceiverChatItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPReceiverChatItemTableViewCellID")
    /// Reuse identifier `PPSelectPostItemTableViewCellID`.
    static let ppSelectPostItemTableViewCellID: Rswift.ReuseIdentifier<PPSelectPostItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSelectPostItemTableViewCellID")
    /// Reuse identifier `PPSenderChatItemTableViewCellID`.
    static let ppSenderChatItemTableViewCellID: Rswift.ReuseIdentifier<PPSenderChatItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSenderChatItemTableViewCellID")
    /// Reuse identifier `PPSettingsItemTableViewCellID`.
    static let ppSettingsItemTableViewCellID: Rswift.ReuseIdentifier<PPSettingsItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSettingsItemTableViewCellID")
    /// Reuse identifier `PPStoryItemCollectionViewCellID`.
    static let ppStoryItemCollectionViewCellID: Rswift.ReuseIdentifier<PPStoryItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPStoryItemCollectionViewCellID")
    /// Reuse identifier `PPSubmitButtonItemTableViewCellID`.
    static let ppSubmitButtonItemTableViewCellID: Rswift.ReuseIdentifier<PPSubmitButtonItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSubmitButtonItemTableViewCellID")
    /// Reuse identifier `PPUserProfileThumbnailItemCollectionViewCellID`.
    static let ppUserProfileThumbnailItemCollectionViewCellID: Rswift.ReuseIdentifier<PPUserProfileThumbnailItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPUserProfileThumbnailItemCollectionViewCellID")
    /// Reuse identifier `PPUserSuggestionCollectionViewCellID`.
    static let ppUserSuggestionCollectionViewCellID: Rswift.ReuseIdentifier<PPUserSuggestionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPUserSuggestionCollectionViewCellID")
    /// Reuse identifier `PPVideoItemTableViewCellID`.
    static let ppVideoItemTableViewCellID: Rswift.ReuseIdentifier<PPVideoItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPVideoItemTableViewCellID")
    /// Reuse identifier `PPYourStoryItemCollectionViewCellID`.
    static let ppYourStoryItemCollectionViewCellID: Rswift.ReuseIdentifier<PPYourStoryItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPYourStoryItemCollectionViewCellID")
    /// Reuse identifier `PPYoutubeItemTableViewCellID`.
    static let ppYoutubeItemTableViewCellID: Rswift.ReuseIdentifier<PPYoutubeItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPYoutubeItemTableViewCellID")
    /// Reuse identifier `UserSuggestionCollectionCell`.
    static let userSuggestionCollectionCell: Rswift.ReuseIdentifier<UserSuggestionCollectionCell> = Rswift.ReuseIdentifier(identifier: "UserSuggestionCollectionCell")
    /// Reuse identifier `VerticalCollectionviewItemTableViewCellID`.
    static let verticalCollectionviewItemTableViewCellID: Rswift.ReuseIdentifier<VerticalCollectionviewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "VerticalCollectionviewItemTableViewCellID")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizabl` struct is generated, and contains static references to 5 localization keys.
    struct localizabl {
      /// Base translation: Loading more
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static let loadingMore = Rswift.StringResource(key: "Loading more", tableName: "Localizabl", bundle: R.hostingBundle, locales: ["Base", "de", "es", "fr", "it", "zh-Hans", "zh-Hant"], comment: nil)
      /// Base translation: Loading...
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static let loading = Rswift.StringResource(key: "Loading...", tableName: "Localizabl", bundle: R.hostingBundle, locales: ["Base", "de", "es", "fr", "it", "zh-Hans", "zh-Hant"], comment: nil)
      /// Base translation: No more data
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static let noMoreData = Rswift.StringResource(key: "No more data", tableName: "Localizabl", bundle: R.hostingBundle, locales: ["Base", "de", "es", "fr", "it", "zh-Hans", "zh-Hant"], comment: nil)
      /// Base translation: Pull to refresh
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static let pullToRefresh = Rswift.StringResource(key: "Pull to refresh", tableName: "Localizabl", bundle: R.hostingBundle, locales: ["Base", "de", "es", "fr", "it", "zh-Hans", "zh-Hant"], comment: nil)
      /// Base translation: Release to refresh
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static let releaseToRefresh = Rswift.StringResource(key: "Release to refresh", tableName: "Localizabl", bundle: R.hostingBundle, locales: ["Base", "de", "es", "fr", "it", "zh-Hans", "zh-Hant"], comment: nil)

      /// Base translation: Loading more
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static func loadingMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading more", tableName: "Localizabl", bundle: hostingBundle, value: "Loading more", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizabl", preferredLanguages: preferredLanguages) else {
          return "Loading more"
        }

        return NSLocalizedString("Loading more", tableName: "Localizabl", bundle: bundle, value: "Loading more", comment: "")
      }

      /// Base translation: Loading...
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading...", tableName: "Localizabl", bundle: hostingBundle, value: "Loading...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizabl", preferredLanguages: preferredLanguages) else {
          return "Loading..."
        }

        return NSLocalizedString("Loading...", tableName: "Localizabl", bundle: bundle, value: "Loading...", comment: "")
      }

      /// Base translation: No more data
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static func noMoreData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No more data", tableName: "Localizabl", bundle: hostingBundle, value: "No more data", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizabl", preferredLanguages: preferredLanguages) else {
          return "No more data"
        }

        return NSLocalizedString("No more data", tableName: "Localizabl", bundle: bundle, value: "No more data", comment: "")
      }

      /// Base translation: Pull to refresh
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static func pullToRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pull to refresh", tableName: "Localizabl", bundle: hostingBundle, value: "Pull to refresh", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizabl", preferredLanguages: preferredLanguages) else {
          return "Pull to refresh"
        }

        return NSLocalizedString("Pull to refresh", tableName: "Localizabl", bundle: bundle, value: "Pull to refresh", comment: "")
      }

      /// Base translation: Release to refresh
      ///
      /// Locales: Base, de, es, fr, it, zh-Hans, zh-Hant
      static func releaseToRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Release to refresh", tableName: "Localizabl", bundle: hostingBundle, value: "Release to refresh", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizabl", preferredLanguages: preferredLanguages) else {
          return "Release to refresh"
        }

        return NSLocalizedString("Release to refresh", tableName: "Localizabl", bundle: bundle, value: "Release to refresh", comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 116 localization keys.
    struct localizable {
      /// en translation: About you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let aboutYou = Rswift.StringResource(key: "About you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Account Privacy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let accountPrivacy = Rswift.StringResource(key: "Account Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Add Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let addStory = Rswift.StringResource(key: "Add Story", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Add post caption. #hashtag..@mentioned?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let addPostCaptionHashtagMentioned = Rswift.StringResource(key: "Add post caption. #hashtag..@mentioned?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Add to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let addToPost = Rswift.StringResource(key: "Add to Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let byregisteringyouagreetoouR = Rswift.StringResource(key: "BY REGISTERING YOU AGREE TO OUR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Block
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let block = Rswift.StringResource(key: "Block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Blocked User
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let blockedUser = Rswift.StringResource(key: "Blocked User", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: CREATE AN ACCOUNT
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let createanaccounT = Rswift.StringResource(key: "CREATE AN ACCOUNT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Chose Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let choseImage = Rswift.StringResource(key: "Chose image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Clear Chat
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let clearChat = Rswift.StringResource(key: "Clear Chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let comment = Rswift.StringResource(key: "Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Commenti
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let comments = Rswift.StringResource(key: "Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let confirmPassword = Rswift.StringResource(key: "Confirm Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Current Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let currentPassword = Rswift.StringResource(key: "Current Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let donthaveanaccounT = Rswift.StringResource(key: "DON'T HAVE AN ACCOUNT?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Delete This Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let deleteThisPost = Rswift.StringResource(key: "Delete This Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Email o username
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let emailOrUsername = Rswift.StringResource(key: "Email or Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Embed Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let embedVideo = Rswift.StringResource(key: "Embed Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Everyone
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let everyone = Rswift.StringResource(key: "Everyone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Explore Everything
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let title1 = Rswift.StringResource(key: "Title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let firstName = Rswift.StringResource(key: "First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let follow = Rswift.StringResource(key: "Follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Followed me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let followedMe = Rswift.StringResource(key: "Followed me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Followers
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let followers = Rswift.StringResource(key: "Followers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Following
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let following = Rswift.StringResource(key: "Following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let forgotYourPassword = Rswift.StringResource(key: "Forgot your password?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let giF = Rswift.StringResource(key: "GIF", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let gender = Rswift.StringResource(key: "Gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: General
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let general = Rswift.StringResource(key: "General", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Go to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let goToPost = Rswift.StringResource(key: "Go to Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: HASHTAGS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let hashtagS = Rswift.StringResource(key: "HASHTAGS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Hi! There I'm using Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let hiThereIMUsingPixelPhoto = Rswift.StringResource(key: "Hi! There I'm using Pixel Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let ifYouForgotYourPasswordYouCanResetItFromHere = Rswift.StringResource(key: "If you forgot your password, you can reset it from here.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let image = Rswift.StringResource(key: "Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Image Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let imageGallery = Rswift.StringResource(key: "Image Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Immediately save images or video to check them later anytime and in every place
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let desc3 = Rswift.StringResource(key: "Desc3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Just like the photos wich you found interesting and become a follower of fampus people
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let desc2 = Rswift.StringResource(key: "Desc2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let lastName = Rswift.StringResource(key: "Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Like
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let like = Rswift.StringResource(key: "Like", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Liked & Follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let title2 = Rswift.StringResource(key: "Title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Liked my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let likedMyPost = Rswift.StringResource(key: "Liked my post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Mention Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let mentionContact = Rswift.StringResource(key: "Mention Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Mentioned Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let mentionedContact = Rswift.StringResource(key: "Mentioned Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Mentioned me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let mentionedMe = Rswift.StringResource(key: "Mentioned me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let message = Rswift.StringResource(key: "Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let newPassword = Rswift.StringResource(key: "New Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Nobody
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let nobody = Rswift.StringResource(key: "Nobody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let notification = Rswift.StringResource(key: "Notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Option
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let option = Rswift.StringResource(key: "Option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let others = Rswift.StringResource(key: "Others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: People I follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let peopleIFollow = Rswift.StringResource(key: "People I follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let appName = Rswift.StringResource(key: "App Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Please , confirm checkbox to process this action
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let checkDelete = Rswift.StringResource(key: "Check Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Please enter your email address. We will send you a link to reset password.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword = Rswift.StringResource(key: "Please enter your email address. We will send you a link to reset password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Please see my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let pleaseSeeMyPost = Rswift.StringResource(key: "Please see my post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let post = Rswift.StringResource(key: "Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Posts
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let posts = Rswift.StringResource(key: "Posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Privacy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let privacy = Rswift.StringResource(key: "Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Received Notification when some one
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let receiveNotificationWhenSomeOne = Rswift.StringResource(key: "Receive Notification when some one", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let register = Rswift.StringResource(key: "Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Remove Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let removeAccount = Rswift.StringResource(key: "Remove Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Repeat Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let repeatPassword = Rswift.StringResource(key: "Repeat Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Report This Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let reportThisPost = Rswift.StringResource(key: "Report This Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: SEND
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let senD = Rswift.StringResource(key: "SEND", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: SIGN IN
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let signiN = Rswift.StringResource(key: "SIGN IN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Sad no result!
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let sadNoResult = Rswift.StringResource(key: "Sad no result!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Save & Continue
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let saveContinue = Rswift.StringResource(key: "Save & Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Save & Favorite
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let title3 = Rswift.StringResource(key: "Title3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Search Random
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let searchRandom = Rswift.StringResource(key: "Search Random", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Select GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let selectGIF = Rswift.StringResource(key: "Select GIF", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Share images, video, link, Gifs and Stories with who you love and create popular hashtag
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let desc1 = Rswift.StringResource(key: "Desc1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Show all comments
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let showAllComments = Rswift.StringResource(key: "Show all comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Show your profile in search engines
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let showYourProfileInSearchEngines = Rswift.StringResource(key: "Show your profile in search engines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let signIn = Rswift.StringResource(key: "Sign In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Start to follow you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let followedYou = Rswift.StringResource(key: "followed you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Suggestion for you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let suggestionForYou = Rswift.StringResource(key: "Suggestion for you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: TERMS AND SERVICES
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let termsandserviceS = Rswift.StringResource(key: "TERMS AND SERVICES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Text
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let text = Rswift.StringResource(key: "Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let typeSomething = Rswift.StringResource(key: "Type Something", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let typeSometing = Rswift.StringResource(key: "Type Someting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: USERS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let userS = Rswift.StringResource(key: "USERS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: User Suggestion
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let userSuggestion = Rswift.StringResource(key: "User Suggestion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let username = Rswift.StringResource(key: "Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let video = Rswift.StringResource(key: "Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Video Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let videoGallery = Rswift.StringResource(key: "Video Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let weCannotFindTheKeywordYouAreSearchingFormMaybeALittleSpellingMistake = Rswift.StringResource(key: "We cannot find the keyword you are searching form maybe a little spelling mistake?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Welcome to PixelPhoto
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let welcomeText = Rswift.StringResource(key: "WelcomeText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Where do you want to share it?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let whereDoYouWantToShareIt = Rswift.StringResource(key: "Where do you want to share it?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Who can direct message your
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let whoCanDirectMessageYou = Rswift.StringResource(key: "Who can direct message you?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Who can view your profile?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let whoCanViewYourProfile = Rswift.StringResource(key: "Who can view your profile?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let yesIWanToDeletePermanentlyFromPixelPhotoAccount = Rswift.StringResource(key: "Yes, I wan to delete permanently from PixelPhoto Account.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: You
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let you = Rswift.StringResource(key: "You", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Your Facebook profile url
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let yourFacebookProfileUrl = Rswift.StringResource(key: "Your Facebook profile url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Your Google Plus profile url
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let yourGooglePlusProfileUrl = Rswift.StringResource(key: "Your Google Plus profile url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Your Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let yourStory = Rswift.StringResource(key: "Your Story", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: liked your comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let likedYourPost = Rswift.StringResource(key: "liked your post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: mentioned you in a comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let mentionedYouInAComment = Rswift.StringResource(key: "mentioned you in a comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: mentioned you in a post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let mentionedYouInAPost = Rswift.StringResource(key: "mentioned you in a post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)

      /// en translation: About you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func aboutYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About you"
        }

        return NSLocalizedString("About you", bundle: bundle, comment: "")
      }

      /// en translation: Account Privacy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func accountPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Account Privacy"
        }

        return NSLocalizedString("Account Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Add Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func addStory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Story", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Story"
        }

        return NSLocalizedString("Add Story", bundle: bundle, comment: "")
      }

      /// en translation: Add post caption. #hashtag..@mentioned?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func addPostCaptionHashtagMentioned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add post caption. #hashtag..@mentioned?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add post caption. #hashtag..@mentioned?"
        }

        return NSLocalizedString("Add post caption. #hashtag..@mentioned?", bundle: bundle, comment: "")
      }

      /// en translation: Add to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func addToPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add to Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add to Post"
        }

        return NSLocalizedString("Add to Post", bundle: bundle, comment: "")
      }

      /// en translation: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func byregisteringyouagreetoouR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BY REGISTERING YOU AGREE TO OUR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BY REGISTERING YOU AGREE TO OUR"
        }

        return NSLocalizedString("BY REGISTERING YOU AGREE TO OUR", bundle: bundle, comment: "")
      }

      /// en translation: Block
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func block(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Block", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Block"
        }

        return NSLocalizedString("Block", bundle: bundle, comment: "")
      }

      /// en translation: Blocked User
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func blockedUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blocked User", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blocked User"
        }

        return NSLocalizedString("Blocked User", bundle: bundle, comment: "")
      }

      /// en translation: CREATE AN ACCOUNT
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func createanaccounT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CREATE AN ACCOUNT", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CREATE AN ACCOUNT"
        }

        return NSLocalizedString("CREATE AN ACCOUNT", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Chose Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func choseImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chose image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chose image"
        }

        return NSLocalizedString("Chose image", bundle: bundle, comment: "")
      }

      /// en translation: Clear Chat
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func clearChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Clear Chat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Clear Chat"
        }

        return NSLocalizedString("Clear Chat", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: Comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comment"
        }

        return NSLocalizedString("Comment", bundle: bundle, comment: "")
      }

      /// en translation: Commenti
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func comments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comments"
        }

        return NSLocalizedString("Comments", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Password"
        }

        return NSLocalizedString("Confirm Password", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func copy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy"
        }

        return NSLocalizedString("Copy", bundle: bundle, comment: "")
      }

      /// en translation: Current Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func currentPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Current Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Current Password"
        }

        return NSLocalizedString("Current Password", bundle: bundle, comment: "")
      }

      /// en translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func donthaveanaccounT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DON'T HAVE AN ACCOUNT?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DON'T HAVE AN ACCOUNT?"
        }

        return NSLocalizedString("DON'T HAVE AN ACCOUNT?", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func deleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Account"
        }

        return NSLocalizedString("Delete Account", bundle: bundle, comment: "")
      }

      /// en translation: Delete This Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func deleteThisPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete This Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete This Post"
        }

        return NSLocalizedString("Delete This Post", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: Email o username
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func emailOrUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email or Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email or Username"
        }

        return NSLocalizedString("Email or Username", bundle: bundle, comment: "")
      }

      /// en translation: Embed Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func embedVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Embed Video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Embed Video"
        }

        return NSLocalizedString("Embed Video", bundle: bundle, comment: "")
      }

      /// en translation: Everyone
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func everyone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Everyone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Everyone"
        }

        return NSLocalizedString("Everyone", bundle: bundle, comment: "")
      }

      /// en translation: Explore Everything
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func title1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title1"
        }

        return NSLocalizedString("Title1", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First Name"
        }

        return NSLocalizedString("First Name", bundle: bundle, comment: "")
      }

      /// en translation: Follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func follow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow"
        }

        return NSLocalizedString("Follow", bundle: bundle, comment: "")
      }

      /// en translation: Followed me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func followedMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followed me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followed me"
        }

        return NSLocalizedString("Followed me", bundle: bundle, comment: "")
      }

      /// en translation: Followers
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func followers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followers"
        }

        return NSLocalizedString("Followers", bundle: bundle, comment: "")
      }

      /// en translation: Following
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Following"
        }

        return NSLocalizedString("Following", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot Password"
        }

        return NSLocalizedString("Forgot Password", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func forgotYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot your password?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot your password?"
        }

        return NSLocalizedString("Forgot your password?", bundle: bundle, comment: "")
      }

      /// en translation: GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func giF(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GIF", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GIF"
        }

        return NSLocalizedString("GIF", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery"
        }

        return NSLocalizedString("Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gender"
        }

        return NSLocalizedString("Gender", bundle: bundle, comment: "")
      }

      /// en translation: General
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func general(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "General"
        }

        return NSLocalizedString("General", bundle: bundle, comment: "")
      }

      /// en translation: Go to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func goToPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go to Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go to Post"
        }

        return NSLocalizedString("Go to Post", bundle: bundle, comment: "")
      }

      /// en translation: HASHTAGS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func hashtagS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HASHTAGS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HASHTAGS"
        }

        return NSLocalizedString("HASHTAGS", bundle: bundle, comment: "")
      }

      /// en translation: Hi! There I'm using Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func hiThereIMUsingPixelPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hi! There I'm using Pixel Photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hi! There I'm using Pixel Photo"
        }

        return NSLocalizedString("Hi! There I'm using Pixel Photo", bundle: bundle, comment: "")
      }

      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func ifYouForgotYourPasswordYouCanResetItFromHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("If you forgot your password, you can reset it from here.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "If you forgot your password, you can reset it from here."
        }

        return NSLocalizedString("If you forgot your password, you can reset it from here.", bundle: bundle, comment: "")
      }

      /// en translation: Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image"
        }

        return NSLocalizedString("Image", bundle: bundle, comment: "")
      }

      /// en translation: Image Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func imageGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image Gallery"
        }

        return NSLocalizedString("Image Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Immediately save images or video to check them later anytime and in every place
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func desc3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Desc3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Desc3"
        }

        return NSLocalizedString("Desc3", bundle: bundle, comment: "")
      }

      /// en translation: Just like the photos wich you found interesting and become a follower of fampus people
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func desc2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Desc2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Desc2"
        }

        return NSLocalizedString("Desc2", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last Name"
        }

        return NSLocalizedString("Last Name", bundle: bundle, comment: "")
      }

      /// en translation: Like
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func like(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Like", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Like"
        }

        return NSLocalizedString("Like", bundle: bundle, comment: "")
      }

      /// en translation: Liked & Follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func title2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title2"
        }

        return NSLocalizedString("Title2", bundle: bundle, comment: "")
      }

      /// en translation: Liked my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func likedMyPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Liked my post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Liked my post"
        }

        return NSLocalizedString("Liked my post", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Mention Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func mentionContact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mention Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mention Contact"
        }

        return NSLocalizedString("Mention Contact", bundle: bundle, comment: "")
      }

      /// en translation: Mentioned Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func mentionedContact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mentioned Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mentioned Contact"
        }

        return NSLocalizedString("Mentioned Contact", bundle: bundle, comment: "")
      }

      /// en translation: Mentioned me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func mentionedMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mentioned me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mentioned me"
        }

        return NSLocalizedString("Mentioned me", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message"
        }

        return NSLocalizedString("Message", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password"
        }

        return NSLocalizedString("New Password", bundle: bundle, comment: "")
      }

      /// en translation: Nobody
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func nobody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nobody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Nobody"
        }

        return NSLocalizedString("Nobody", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification"
        }

        return NSLocalizedString("Notification", bundle: bundle, comment: "")
      }

      /// en translation: Option
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Option"
        }

        return NSLocalizedString("Option", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func others(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Others", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Others"
        }

        return NSLocalizedString("Others", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: People I follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func peopleIFollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("People I follow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "People I follow"
        }

        return NSLocalizedString("People I follow", bundle: bundle, comment: "")
      }

      /// en translation: Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func appName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("App Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "App Name"
        }

        return NSLocalizedString("App Name", bundle: bundle, comment: "")
      }

      /// en translation: Please , confirm checkbox to process this action
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func checkDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Check Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Check Delete"
        }

        return NSLocalizedString("Check Delete", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your email address. We will send you a link to reset password.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your email address. We will send you a link to reset password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your email address. We will send you a link to reset password."
        }

        return NSLocalizedString("Please enter your email address. We will send you a link to reset password.", bundle: bundle, comment: "")
      }

      /// en translation: Please see my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func pleaseSeeMyPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please see my post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please see my post"
        }

        return NSLocalizedString("Please see my post", bundle: bundle, comment: "")
      }

      /// en translation: Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func post(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Post"
        }

        return NSLocalizedString("Post", bundle: bundle, comment: "")
      }

      /// en translation: Posts
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func posts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Posts"
        }

        return NSLocalizedString("Posts", bundle: bundle, comment: "")
      }

      /// en translation: Privacy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy"
        }

        return NSLocalizedString("Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile"
        }

        return NSLocalizedString("Profile", bundle: bundle, comment: "")
      }

      /// en translation: Received Notification when some one
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func receiveNotificationWhenSomeOne(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Receive Notification when some one", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Receive Notification when some one"
        }

        return NSLocalizedString("Receive Notification when some one", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Register"
        }

        return NSLocalizedString("Register", bundle: bundle, comment: "")
      }

      /// en translation: Remove Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func removeAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remove Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Remove Account"
        }

        return NSLocalizedString("Remove Account", bundle: bundle, comment: "")
      }

      /// en translation: Repeat Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func repeatPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repeat Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repeat Password"
        }

        return NSLocalizedString("Repeat Password", bundle: bundle, comment: "")
      }

      /// en translation: Report This Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func reportThisPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report This Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report This Post"
        }

        return NSLocalizedString("Report This Post", bundle: bundle, comment: "")
      }

      /// en translation: SEND
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func senD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SEND", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SEND"
        }

        return NSLocalizedString("SEND", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func signiN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SIGN IN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SIGN IN"
        }

        return NSLocalizedString("SIGN IN", bundle: bundle, comment: "")
      }

      /// en translation: Sad no result!
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func sadNoResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sad no result!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sad no result!"
        }

        return NSLocalizedString("Sad no result!", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Save & Continue
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func saveContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save & Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save & Continue"
        }

        return NSLocalizedString("Save & Continue", bundle: bundle, comment: "")
      }

      /// en translation: Save & Favorite
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func title3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title3"
        }

        return NSLocalizedString("Title3", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// en translation: Search Random
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func searchRandom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Random", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Random"
        }

        return NSLocalizedString("Search Random", bundle: bundle, comment: "")
      }

      /// en translation: Select GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func selectGIF(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select GIF", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select GIF"
        }

        return NSLocalizedString("Select GIF", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share images, video, link, Gifs and Stories with who you love and create popular hashtag
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func desc1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Desc1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Desc1"
        }

        return NSLocalizedString("Desc1", bundle: bundle, comment: "")
      }

      /// en translation: Show all comments
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func showAllComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show all comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show all comments"
        }

        return NSLocalizedString("Show all comments", bundle: bundle, comment: "")
      }

      /// en translation: Show your profile in search engines
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func showYourProfileInSearchEngines(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show your profile in search engines", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show your profile in search engines"
        }

        return NSLocalizedString("Show your profile in search engines", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign In", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign In"
        }

        return NSLocalizedString("Sign In", bundle: bundle, comment: "")
      }

      /// en translation: Start to follow you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func followedYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("followed you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "followed you"
        }

        return NSLocalizedString("followed you", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit"
        }

        return NSLocalizedString("Submit", bundle: bundle, comment: "")
      }

      /// en translation: Suggestion for you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func suggestionForYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Suggestion for you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Suggestion for you"
        }

        return NSLocalizedString("Suggestion for you", bundle: bundle, comment: "")
      }

      /// en translation: TERMS AND SERVICES
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func termsandserviceS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TERMS AND SERVICES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TERMS AND SERVICES"
        }

        return NSLocalizedString("TERMS AND SERVICES", bundle: bundle, comment: "")
      }

      /// en translation: Text
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Text"
        }

        return NSLocalizedString("Text", bundle: bundle, comment: "")
      }

      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func typeSomething(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type Something", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type Something"
        }

        return NSLocalizedString("Type Something", bundle: bundle, comment: "")
      }

      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func typeSometing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type Someting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type Someting"
        }

        return NSLocalizedString("Type Someting", bundle: bundle, comment: "")
      }

      /// en translation: USERS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func userS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("USERS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "USERS"
        }

        return NSLocalizedString("USERS", bundle: bundle, comment: "")
      }

      /// en translation: User Suggestion
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func userSuggestion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Suggestion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Suggestion"
        }

        return NSLocalizedString("User Suggestion", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Username"
        }

        return NSLocalizedString("Username", bundle: bundle, comment: "")
      }

      /// en translation: Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func video(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video"
        }

        return NSLocalizedString("Video", bundle: bundle, comment: "")
      }

      /// en translation: Video Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func videoGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video Gallery"
        }

        return NSLocalizedString("Video Gallery", bundle: bundle, comment: "")
      }

      /// en translation: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func weCannotFindTheKeywordYouAreSearchingFormMaybeALittleSpellingMistake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We cannot find the keyword you are searching form maybe a little spelling mistake?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We cannot find the keyword you are searching form maybe a little spelling mistake?"
        }

        return NSLocalizedString("We cannot find the keyword you are searching form maybe a little spelling mistake?", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to PixelPhoto
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func welcomeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WelcomeText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WelcomeText"
        }

        return NSLocalizedString("WelcomeText", bundle: bundle, comment: "")
      }

      /// en translation: Where do you want to share it?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func whereDoYouWantToShareIt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Where do you want to share it?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Where do you want to share it?"
        }

        return NSLocalizedString("Where do you want to share it?", bundle: bundle, comment: "")
      }

      /// en translation: Who can direct message your
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func whoCanDirectMessageYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can direct message you?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can direct message you?"
        }

        return NSLocalizedString("Who can direct message you?", bundle: bundle, comment: "")
      }

      /// en translation: Who can view your profile?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func whoCanViewYourProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can view your profile?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can view your profile?"
        }

        return NSLocalizedString("Who can view your profile?", bundle: bundle, comment: "")
      }

      /// en translation: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func yesIWanToDeletePermanentlyFromPixelPhotoAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes, I wan to delete permanently from PixelPhoto Account.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes, I wan to delete permanently from PixelPhoto Account."
        }

        return NSLocalizedString("Yes, I wan to delete permanently from PixelPhoto Account.", bundle: bundle, comment: "")
      }

      /// en translation: You
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func you(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You"
        }

        return NSLocalizedString("You", bundle: bundle, comment: "")
      }

      /// en translation: Your Facebook profile url
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func yourFacebookProfileUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Facebook profile url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Facebook profile url"
        }

        return NSLocalizedString("Your Facebook profile url", bundle: bundle, comment: "")
      }

      /// en translation: Your Google Plus profile url
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func yourGooglePlusProfileUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Google Plus profile url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Google Plus profile url"
        }

        return NSLocalizedString("Your Google Plus profile url", bundle: bundle, comment: "")
      }

      /// en translation: Your Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func yourStory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Story", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Story"
        }

        return NSLocalizedString("Your Story", bundle: bundle, comment: "")
      }

      /// en translation: liked your comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func likedYourPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("liked your post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "liked your post"
        }

        return NSLocalizedString("liked your post", bundle: bundle, comment: "")
      }

      /// en translation: mentioned you in a comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func mentionedYouInAComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mentioned you in a comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mentioned you in a comment"
        }

        return NSLocalizedString("mentioned you in a comment", bundle: bundle, comment: "")
      }

      /// en translation: mentioned you in a post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func mentionedYouInAPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mentioned you in a post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mentioned you in a post"
        }

        return NSLocalizedString("mentioned you in a post", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ContactsTableCell.validate()
      try _CoverView.validate()
      try _PPCommentItemTableViewCell.validate()
      try _PPGIFItemTableViewCell.validate()
      try _PPImageItemTableViewCell.validate()
      try _PPMosaicGIFItemCollectionViewCell.validate()
      try _PPMosaicImageItemCollectionViewCell.validate()
      try _PPMosaicVideoItemCollectionViewCell.validate()
      try _PPMultiImageItemTableViewCell.validate()
      try _PPMyProfileCaptureProfileTableViewCell.validate()
      try _PPMyProfileITemTableViewCell.validate()
      try _PPNoResultTableViewCell.validate()
      try _PPNotificationItemTableViewCell.validate()
      try _PPPostItemCollectionViewCell.validate()
      try _PPProfileCheckBoxItemTableViewCell.validate()
      try _PPProfileItemTableViewCell.validate()
      try _PPUserProfileThumbnailItemCollectionViewCell.validate()
      try _PPVideoItemTableViewCell.validate()
      try _PPYourStoryItemCollectionViewCell.validate()
      try _PPYoutubeItemTableViewCell.validate()
      try _UserSuggestionCollectionCell.validate()
    }

    struct _ContactsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ContactsTableCell

      let bundle = R.hostingBundle
      let identifier = "ContactsTableCell"
      let name = "ContactsTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactsTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactsTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'ContactsTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CoverView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CoverView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in nib 'CoverView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IntroItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IntroItem

      let bundle = R.hostingBundle
      let identifier = "IntroItem"
      let name = "IntroItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroItem
      }

      fileprivate init() {}
    }

    struct _PPAddPostCaptionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PPAddPostCaptionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPAddPostCaptionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPAddPostCaptionTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPBlockedUserItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPBlockedUserItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPBlockedUserItemTableViewCellID"
      let name = "PPBlockedUserItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPBlockedUserItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPBlockedUserItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPChatUserItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPChatUserItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPChatUserItemTableViewCellID"
      let name = "PPChatUserItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPChatUserItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPChatUserItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPCollectionViewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPCollectionViewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPCollectionViewItemTableViewCellID"
      let name = "PPCollectionViewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCollectionViewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCollectionViewItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPColorItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPColorItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPColorItemCollectionViewCellID"
      let name = "PPColorItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPColorItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPColorItemCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PPCommentItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPCommentItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPCommentItemTableViewCellID"
      let name = "PPCommentItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCommentItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCommentItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_like_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like_inactive' is used in nib 'PPCommentItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPFontItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPFontItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPFontItemCollectionViewCellID"
      let name = "PPFontItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPFontItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPFontItemCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PPGIFItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPGIFItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPGIFItemTableViewCellID"
      let name = "PPGIFItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPGIFItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPGIFItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_comment' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_inactive' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_like_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like_active' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:rh3-IV-sd2:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:rh3-IV-sd2:image' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPHashTagItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPHashTagItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPHashTagItemTableViewCellID"
      let name = "PPHashTagItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHashTagItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHashTagItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPHorizontalCollectionviewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPHorizontalCollectionviewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPHorizontalCollectionviewItemTableViewCellID"
      let name = "PPHorizontalCollectionviewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHorizontalCollectionviewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHorizontalCollectionviewItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPImageItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPImageItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPImageItemTableViewCellID"
      let name = "PPImageItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPImageItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPImageItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_comment' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_inactive' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_like_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like_active' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPInputTextFieldItemTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PPInputTextFieldItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPInputTextFieldItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPInputTextFieldItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPMosaicGIFItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMosaicGIFItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMosaicGIFItemCollectionViewCellID"
      let name = "PPMosaicGIFItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicGIFItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicGIFItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "imageView:Slk-eW-eRQ:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:Slk-eW-eRQ:image' is used in nib 'PPMosaicGIFItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPMosaicImageItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMosaicImageItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMosaicImageItemCollectionViewCellID"
      let name = "PPMosaicImageItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicImageItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicImageItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_item_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_item_placeholder' is used in nib 'PPMosaicImageItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPMosaicVideoItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMosaicVideoItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMosaicVideoItemCollectionViewCellID"
      let name = "PPMosaicVideoItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicVideoItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicVideoItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in nib 'PPMosaicVideoItemCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_item_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_item_placeholder' is used in nib 'PPMosaicVideoItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPMultiImageItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMultiImageItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMultiImageItemTableViewCellID"
      let name = "PPMultiImageItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMultiImageItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMultiImageItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_comment' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_inactive' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_like_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like_active' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPMyProfileCaptureProfileTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PPMyProfileCaptureProfileTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileCaptureProfileTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileCaptureProfileTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_capture_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_capture_camera' is used in nib 'PPMyProfileCaptureProfileTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPMyProfileCaptureProfileTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPMyProfileITemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMyProfileITemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMyProfileITemTableViewCellID"
      let name = "PPMyProfileITemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileITemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileITemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_capture_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_capture_camera' is used in nib 'PPMyProfileITemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPMyProfileITemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPNoResultTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPNoResultTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPNoResultTableViewCellID"
      let name = "PPNoResultTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNoResultTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNoResultTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_search_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_search_big' is used in nib 'PPNoResultTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPNormalVerticalCollectionViewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPNormalVerticalCollectionViewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPNormalVerticalCollectionViewItemTableViewCellID"
      let name = "PPNormalVerticalCollectionViewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNormalVerticalCollectionViewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNormalVerticalCollectionViewItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPNotificationItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPNotificationItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPNotificationItemTableViewCellID"
      let name = "PPNotificationItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNotificationItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNotificationItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPNotificationItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPPostItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPPostItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPPostItemCollectionViewCellID"
      let name = "PPPostItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPPostItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPPostItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_remove_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_item' is used in nib 'PPPostItemCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_item_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_item_placeholder' is used in nib 'PPPostItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPProfileCheckBoxItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPProfileCheckBoxItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPProfileCheckBoxItemTableViewCellID"
      let name = "PPProfileCheckBoxItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileCheckBoxItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileCheckBoxItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPProfileCheckBoxItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPProfileItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPProfileItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPProfileItemTableViewCellID"
      let name = "PPProfileItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPProfileItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPReceiverChatItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPReceiverChatItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPReceiverChatItemTableViewCellID"
      let name = "PPReceiverChatItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPReceiverChatItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPReceiverChatItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPSelectPostItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPSelectPostItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSelectPostItemTableViewCellID"
      let name = "PPSelectPostItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSelectPostItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSelectPostItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPSenderChatItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPSenderChatItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSenderChatItemTableViewCellID"
      let name = "PPSenderChatItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSenderChatItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSenderChatItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPSettingsItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPSettingsItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSettingsItemTableViewCellID"
      let name = "PPSettingsItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSettingsItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSettingsItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPStoryItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPStoryItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPStoryItemCollectionViewCellID"
      let name = "PPStoryItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPStoryItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPStoryItemCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PPSubmitButtonItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPSubmitButtonItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSubmitButtonItemTableViewCellID"
      let name = "PPSubmitButtonItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSubmitButtonItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSubmitButtonItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPUserProfileThumbnailItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPUserProfileThumbnailItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPUserProfileThumbnailItemCollectionViewCellID"
      let name = "PPUserProfileThumbnailItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserProfileThumbnailItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserProfileThumbnailItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPUserProfileThumbnailItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPUserSuggestionCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPUserSuggestionCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPUserSuggestionCollectionViewCellID"
      let name = "PPUserSuggestionCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserSuggestionCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserSuggestionCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PPVideoItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPVideoItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPVideoItemTableViewCellID"
      let name = "PPVideoItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPVideoItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPVideoItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_comment' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_inactive' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_like_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like_active' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pause' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipBackward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipBackward' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipForward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipForward' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPYourStoryItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPYourStoryItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPYourStoryItemCollectionViewCellID"
      let name = "PPYourStoryItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYourStoryItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYourStoryItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_plus_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_white' is used in nib 'PPYourStoryItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPYoutubeItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPYoutubeItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPYoutubeItemTableViewCellID"
      let name = "PPYoutubeItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYoutubeItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYoutubeItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_comment' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favorite_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favorite_inactive' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_like_active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like_active' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _UserSuggestionCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserSuggestionCollectionCell

      let bundle = R.hostingBundle
      let identifier = "UserSuggestionCollectionCell"
      let name = "UserSuggestionCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserSuggestionCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserSuggestionCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'UserSuggestionCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VerticalCollectionviewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = VerticalCollectionviewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "VerticalCollectionviewItemTableViewCellID"
      let name = "VerticalCollectionviewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VerticalCollectionviewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerticalCollectionviewItemTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try chat.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try dashboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try popup.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try post.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try story.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct chat: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatListVC = StoryboardViewControllerResource<ChatListVC>(identifier: "ChatListVC")
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let contactsVC = StoryboardViewControllerResource<ContactsVC>(identifier: "ContactsVC")
      let name = "Chat"

      func chatListVC(_: Void = ()) -> ChatListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatListVC)
      }

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func contactsVC(_: Void = ()) -> ContactsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_user' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_black' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blockuser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blockuser' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chat_bg' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noChat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noChat' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.chat().chatListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatListVC' could not be loaded from storyboard 'Chat' as 'ChatListVC'.") }
        if _R.storyboard.chat().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Chat' as 'ChatVC'.") }
        if _R.storyboard.chat().contactsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactsVC' could not be loaded from storyboard 'Chat' as 'ContactsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct dashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let addPostVC = StoryboardViewControllerResource<AddPostVC>(identifier: "AddPostVC")
      let bundle = R.hostingBundle
      let exploreVC = StoryboardViewControllerResource<ExploreVC>(identifier: "ExploreVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "Dashboard"
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
      let tabbarVC = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "TabbarVC")

      func addPostVC(_: Void = ()) -> AddPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPostVC)
      }

      func exploreVC(_: Void = ()) -> ExploreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exploreVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }

      func tabbarVC(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbarVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_add_post", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_post' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_capture_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_capture_camera' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chat' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noUserData", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noUserData' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_notificationBell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_notificationBell' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_settings' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_add' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_explore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_explore' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_home' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_notification' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_profile' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.dashboard().addPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPostVC' could not be loaded from storyboard 'Dashboard' as 'AddPostVC'.") }
        if _R.storyboard.dashboard().exploreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exploreVC' could not be loaded from storyboard 'Dashboard' as 'ExploreVC'.") }
        if _R.storyboard.dashboard().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Dashboard' as 'HomeVC'.") }
        if _R.storyboard.dashboard().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Dashboard' as 'NotificationVC'.") }
        if _R.storyboard.dashboard().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Dashboard' as 'ProfileVC'.") }
        if _R.storyboard.dashboard().tabbarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbarVC' could not be loaded from storyboard 'Dashboard' as 'UIKit.UITabBarController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "img_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashVC

      let bundle = R.hostingBundle
      let forgetPasswordVC = StoryboardViewControllerResource<ForgetPasswordVC>(identifier: "ForgetPasswordVC")
      let introVC = StoryboardViewControllerResource<IntroVC>(identifier: "IntroVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let mainNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "mainNav")
      let name = "Main"
      let ppWebViewControllerID = StoryboardViewControllerResource<PPWebViewController>(identifier: "PPWebViewControllerID")
      let signUpVC = StoryboardViewControllerResource<SignUpVC>(identifier: "SignUpVC")
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")

      func forgetPasswordVC(_: Void = ()) -> ForgetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgetPasswordVC)
      }

      func introVC(_: Void = ()) -> IntroVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func mainNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainNav)
      }

      func ppWebViewControllerID(_: Void = ()) -> PPWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ppWebViewControllerID)
      }

      func signUpVC(_: Void = ()) -> SignUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpVC)
      }

      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_intro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_intro' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_splash' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().forgetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Main' as 'ForgetPasswordVC'.") }
        if _R.storyboard.main().introVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introVC' could not be loaded from storyboard 'Main' as 'IntroVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().ppWebViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ppWebViewControllerID' could not be loaded from storyboard 'Main' as 'PPWebViewController'.") }
        if _R.storyboard.main().signUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'Main' as 'SignUpVC'.") }
        if _R.storyboard.main().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Main' as 'SplashVC'.") }
        if _R.storyboard.main().mainNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct popup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Popup"
      let securityPopupVC = StoryboardViewControllerResource<SecurityPopupVC>(identifier: "SecurityPopupVC")

      func securityPopupVC(_: Void = ()) -> SecurityPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: securityPopupVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.popup().securityPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'securityPopupVC' could not be loaded from storyboard 'Popup' as 'SecurityPopupVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct post: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addPostPostVC = StoryboardViewControllerResource<AddPostPostVC>(identifier: "AddPostPostVC")
      let addToPostVC = StoryboardViewControllerResource<AddToPostVC>(identifier: "AddToPostVC")
      let bundle = R.hostingBundle
      let commentReplyVC = StoryboardViewControllerResource<CommentReplyVC>(identifier: "CommentReplyVC")
      let commentVC = StoryboardViewControllerResource<CommentVC>(identifier: "CommentVC")
      let embbedVideoVC = StoryboardViewControllerResource<EmbbedVideoVC>(identifier: "EmbbedVideoVC")
      let gifvC = StoryboardViewControllerResource<GIFVC>(identifier: "GIFVC")
      let likesVC = StoryboardViewControllerResource<LikesVC>(identifier: "LikesVC")
      let name = "Post"
      let ppTagItemViewControllerID = StoryboardViewControllerResource<PPTagItemViewController>(identifier: "PPTagItemViewControllerID")
      let showPostVC = StoryboardViewControllerResource<ShowPostVC>(identifier: "ShowPostVC")
      let showUserProfileVC = StoryboardViewControllerResource<ShowUserProfileVC>(identifier: "ShowUserProfileVC")

      func addPostPostVC(_: Void = ()) -> AddPostPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPostPostVC)
      }

      func addToPostVC(_: Void = ()) -> AddToPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addToPostVC)
      }

      func commentReplyVC(_: Void = ()) -> CommentReplyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentReplyVC)
      }

      func commentVC(_: Void = ()) -> CommentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentVC)
      }

      func embbedVideoVC(_: Void = ()) -> EmbbedVideoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: embbedVideoVC)
      }

      func gifvC(_: Void = ()) -> GIFVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gifvC)
      }

      func likesVC(_: Void = ()) -> LikesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: likesVC)
      }

      func ppTagItemViewControllerID(_: Void = ()) -> PPTagItemViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ppTagItemViewControllerID)
      }

      func showPostVC(_: Void = ()) -> ShowPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showPostVC)
      }

      func showUserProfileVC(_: Void = ()) -> ShowUserProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showUserProfileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_black' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_likeBig", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_likeBig' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noChat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noChat' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noUserData", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noUserData' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_small' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smiley", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_smiley' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tooltip_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tooltip_image' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in storyboard 'Post', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.post().addPostPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPostPostVC' could not be loaded from storyboard 'Post' as 'AddPostPostVC'.") }
        if _R.storyboard.post().addToPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addToPostVC' could not be loaded from storyboard 'Post' as 'AddToPostVC'.") }
        if _R.storyboard.post().commentReplyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentReplyVC' could not be loaded from storyboard 'Post' as 'CommentReplyVC'.") }
        if _R.storyboard.post().commentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentVC' could not be loaded from storyboard 'Post' as 'CommentVC'.") }
        if _R.storyboard.post().embbedVideoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'embbedVideoVC' could not be loaded from storyboard 'Post' as 'EmbbedVideoVC'.") }
        if _R.storyboard.post().gifvC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gifvC' could not be loaded from storyboard 'Post' as 'GIFVC'.") }
        if _R.storyboard.post().likesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'likesVC' could not be loaded from storyboard 'Post' as 'LikesVC'.") }
        if _R.storyboard.post().ppTagItemViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ppTagItemViewControllerID' could not be loaded from storyboard 'Post' as 'PPTagItemViewController'.") }
        if _R.storyboard.post().showPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showPostVC' could not be loaded from storyboard 'Post' as 'ShowPostVC'.") }
        if _R.storyboard.post().showUserProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showUserProfileVC' could not be loaded from storyboard 'Post' as 'ShowUserProfileVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let favoritesVC = StoryboardViewControllerResource<FavoritesVC>(identifier: "FavoritesVC")
      let followersVC = StoryboardViewControllerResource<FollowersVC>(identifier: "FollowersVC")
      let followingVC = StoryboardViewControllerResource<FollowingVC>(identifier: "FollowingVC")
      let name = "Profile"
      let ppFollowerFollowingViewControllerID = StoryboardViewControllerResource<PPFollowerFollowingViewController>(identifier: "PPFollowerFollowingViewControllerID")
      let userSuggestionVC = StoryboardViewControllerResource<UserSuggestionVC>(identifier: "UserSuggestionVC")

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func favoritesVC(_: Void = ()) -> FavoritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoritesVC)
      }

      func followersVC(_: Void = ()) -> FollowersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followersVC)
      }

      func followingVC(_: Void = ()) -> FollowingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followingVC)
      }

      func ppFollowerFollowingViewControllerID(_: Void = ()) -> PPFollowerFollowingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ppFollowerFollowingViewControllerID)
      }

      func userSuggestionVC(_: Void = ()) -> UserSuggestionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSuggestionVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_blockuser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blockuser' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_capture_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_capture_camera' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profile().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Profile' as 'EditProfileVC'.") }
        if _R.storyboard.profile().favoritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoritesVC' could not be loaded from storyboard 'Profile' as 'FavoritesVC'.") }
        if _R.storyboard.profile().followersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followersVC' could not be loaded from storyboard 'Profile' as 'FollowersVC'.") }
        if _R.storyboard.profile().followingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followingVC' could not be loaded from storyboard 'Profile' as 'FollowingVC'.") }
        if _R.storyboard.profile().ppFollowerFollowingViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ppFollowerFollowingViewControllerID' could not be loaded from storyboard 'Profile' as 'PPFollowerFollowingViewController'.") }
        if _R.storyboard.profile().userSuggestionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSuggestionVC' could not be loaded from storyboard 'Profile' as 'UserSuggestionVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let fetchHashTagPostVC = StoryboardViewControllerResource<FetchHashTagPostVC>(identifier: "FetchHashTagPostVC")
      let name = "Search"
      let searchVC = StoryboardViewControllerResource<SearchVC>(identifier: "SearchVC")

      func fetchHashTagPostVC(_: Void = ()) -> FetchHashTagPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fetchHashTagPostVC)
      }

      func searchVC(_: Void = ()) -> SearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.search().fetchHashTagPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fetchHashTagPostVC' could not be loaded from storyboard 'Search' as 'FetchHashTagPostVC'.") }
        if _R.storyboard.search().searchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'Search' as 'SearchVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountPrivacyVC = StoryboardViewControllerResource<AccountPrivacyVC>(identifier: "AccountPrivacyVC")
      let blockUserVC = StoryboardViewControllerResource<BlockUserVC>(identifier: "BlockUserVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let deleteAccountVC = StoryboardViewControllerResource<DeleteAccountVC>(identifier: "DeleteAccountVC")
      let generalVC = StoryboardViewControllerResource<GeneralVC>(identifier: "GeneralVC")
      let name = "Settings"
      let notificationSettingsVC = StoryboardViewControllerResource<NotificationSettingsVC>(identifier: "NotificationSettingsVC")
      let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
      let settingsProfileVC = StoryboardViewControllerResource<SettingsProfileVC>(identifier: "SettingsProfileVC")

      func accountPrivacyVC(_: Void = ()) -> AccountPrivacyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountPrivacyVC)
      }

      func blockUserVC(_: Void = ()) -> BlockUserVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blockUserVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func deleteAccountVC(_: Void = ()) -> DeleteAccountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deleteAccountVC)
      }

      func generalVC(_: Void = ()) -> GeneralVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: generalVC)
      }

      func notificationSettingsVC(_: Void = ()) -> NotificationSettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationSettingsVC)
      }

      func settingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }

      func settingsProfileVC(_: Void = ()) -> SettingsProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsProfileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_blockuser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blockuser' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radioOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radioOff' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().accountPrivacyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountPrivacyVC' could not be loaded from storyboard 'Settings' as 'AccountPrivacyVC'.") }
        if _R.storyboard.settings().blockUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blockUserVC' could not be loaded from storyboard 'Settings' as 'BlockUserVC'.") }
        if _R.storyboard.settings().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Settings' as 'ChangePasswordVC'.") }
        if _R.storyboard.settings().deleteAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'Settings' as 'DeleteAccountVC'.") }
        if _R.storyboard.settings().generalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'generalVC' could not be loaded from storyboard 'Settings' as 'GeneralVC'.") }
        if _R.storyboard.settings().notificationSettingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationSettingsVC' could not be loaded from storyboard 'Settings' as 'NotificationSettingsVC'.") }
        if _R.storyboard.settings().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Settings' as 'SettingVC'.") }
        if _R.storyboard.settings().settingsProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsProfileVC' could not be loaded from storyboard 'Settings' as 'SettingsProfileVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct story: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createImageStoryVC = StoryboardViewControllerResource<CreateImageStoryVC>(identifier: "CreateImageStoryVC")
      let createStoryTextVC = StoryboardViewControllerResource<CreateStoryTextVC>(identifier: "CreateStoryTextVC")
      let createVideoStoryVC = StoryboardViewControllerResource<CreateVideoStoryVC>(identifier: "CreateVideoStoryVC")
      let name = "Story"
      let pageViewController = StoryboardViewControllerResource<UIKit.UIPageViewController>(identifier: "PageViewController")
      let ppStoryTextColorViewControllerID = StoryboardViewControllerResource<PPStoryTextColorViewController>(identifier: "PPStoryTextColorViewControllerID")
      let preStoriesItemVC = StoryboardViewControllerResource<PreStoriesItemVC>(identifier: "PreStoriesItemVC")
      let storiesItemVC = StoryboardViewControllerResource<StoriesItemVC>(identifier: "StoriesItemVC")

      func createImageStoryVC(_: Void = ()) -> CreateImageStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createImageStoryVC)
      }

      func createStoryTextVC(_: Void = ()) -> CreateStoryTextVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createStoryTextVC)
      }

      func createVideoStoryVC(_: Void = ()) -> CreateVideoStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createVideoStoryVC)
      }

      func pageViewController(_: Void = ()) -> UIKit.UIPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageViewController)
      }

      func ppStoryTextColorViewControllerID(_: Void = ()) -> PPStoryTextColorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ppStoryTextColorViewControllerID)
      }

      func preStoriesItemVC(_: Void = ()) -> PreStoriesItemVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: preStoriesItemVC)
      }

      func storiesItemVC(_: Void = ()) -> StoriesItemVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storiesItemVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_paint", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_paint' is used in storyboard 'Story', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Story', but couldn't be loaded.") }
        }
        if _R.storyboard.story().createImageStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createImageStoryVC' could not be loaded from storyboard 'Story' as 'CreateImageStoryVC'.") }
        if _R.storyboard.story().createStoryTextVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createStoryTextVC' could not be loaded from storyboard 'Story' as 'CreateStoryTextVC'.") }
        if _R.storyboard.story().createVideoStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createVideoStoryVC' could not be loaded from storyboard 'Story' as 'CreateVideoStoryVC'.") }
        if _R.storyboard.story().ppStoryTextColorViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ppStoryTextColorViewControllerID' could not be loaded from storyboard 'Story' as 'PPStoryTextColorViewController'.") }
        if _R.storyboard.story().pageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageViewController' could not be loaded from storyboard 'Story' as 'UIKit.UIPageViewController'.") }
        if _R.storyboard.story().preStoriesItemVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'preStoriesItemVC' could not be loaded from storyboard 'Story' as 'PreStoriesItemVC'.") }
        if _R.storyboard.story().storiesItemVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storiesItemVC' could not be loaded from storyboard 'Story' as 'StoriesItemVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
